// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(STAFF)
  image     String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[] @relation("StaffAppointments")
}

model Client {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  phone         String
  dob           DateTime?
  gender        String?
  occupation    String?
  maritalStatus String?
  referredBy    String?
  consultant    String?
  balance       Decimal  @default(0) @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  appointments         Appointment[]
  treatmentRecords     TreatmentRecord[]
  skinAssessment      SkinAssessment?
  consentForms        ConsentForm[]
  patientIntake       PatientIntake?
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String   @default("other")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants     ServiceVariant[]
  appointments Appointment[]

  @@index([category])
  @@index([isActive])
}

model ServiceVariant {
  id        String   @id @default(cuid())
  name      String
  duration  Int      // in minutes
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
}

model Appointment {
  id        String           @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(BOOKED)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  clientId  String
  client    Client           @relation(fields: [clientId], references: [id])
  serviceId String
  service   Service          @relation(fields: [serviceId], references: [id])
  staffId   String
  staff     User             @relation("StaffAppointments", fields: [staffId], references: [id])

  @@index([clientId])
  @@index([serviceId])
  @@index([staffId])
}

model TreatmentRecord {
  id           String   @id @default(cuid())
  date         DateTime
  totalAmount  Decimal  @db.Decimal(10, 2)
  balanceAfter Decimal  @db.Decimal(10, 2)
  staffName    String
  notes        String?
  type         String   // "TREATMENT" or "FUND_ADDITION"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  treatments Treatment[]

  @@index([clientId])
  @@index([type])
}

model Treatment {
  id     String @id @default(cuid())
  name   String
  price  Decimal @db.Decimal(10, 2)

  treatmentRecordId String
  treatmentRecord   TreatmentRecord @relation(fields: [treatmentRecordId], references: [id])

  @@index([treatmentRecordId])
}

model SkinAssessment {
  id           String   @id @default(cuid())
  skinType     String
  skinTexture  String
  skinTone     String
  treatments   String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

model PatientIntake {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Skin Condition
  skinType          String?
  wrinkleType       String?
  skinTone          String?
  bloodCirculation  String?
  skinThickness     String?
  poreSize          String?
  skinElasticity    String?

  // Previous Aesthetic Treatments
  laser             Boolean @default(false)
  ipl               Boolean @default(false)
  radiofrequency    Boolean @default(false)
  electricalCurrent Boolean @default(false)
  peel              Boolean @default(false)
  hydrafacial       Boolean @default(false)
  aestheticTreatmentDate String?

  // Previous Micro-Invasive Treatments
  hyaluronicAcid    Boolean @default(false)
  botulinumToxin    Boolean @default(false)
  growthFactors     Boolean @default(false)
  lacticAcid        Boolean @default(false)
  microInvasiveOther String?
  microInvasiveDate String?
  satisfactionLevel String?

  // Previous Plastic Surgery
  facelift        Boolean @default(false)
  prosthesis      Boolean @default(false)
  doubleEyelid    Boolean @default(false)
  boneShaving     Boolean @default(false)
  breastImplants  Boolean @default(false)
  liposuction     Boolean @default(false)
  plasticSurgeryOther String?
  plasticSurgeryDate  String?

  // Health Conditions
  heartDisease          Boolean @default(false)
  highBloodPressure     Boolean @default(false)
  diabetes              Boolean @default(false)
  pacemaker             Boolean @default(false)
  cancer                Boolean @default(false)
  cancerName            String?
  cancerDate            String?
  orthodontics          Boolean @default(false)
  orthodonticsName      String?
  orthodonticsDate      String?
  immuneSystemCondition Boolean @default(false)
  immuneSystemDetails   String?
  surgery               Boolean @default(false)
  surgeryName           String?
  surgeryDate           String?
  currentlyPregnant     Boolean @default(false)
  sensitiveToLight      Boolean @default(false)
  lightSensitivityDetails String?
  substanceAllergies    Boolean @default(false)
  allergyDetails        String?
  longTermMedication    Boolean @default(false)
  medicationDetails     String?

  // Treatment Area Conditions
  implants         Boolean @default(false)
  metalStent       Boolean @default(false)
  threadLifting    Boolean @default(false)
  hypertrophicScar Boolean @default(false)

  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

enum Role {
  ADMIN
  STAFF
}

enum AppointmentStatus {
  BOOKED
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ConsentFormType {
  GENERAL_TREATMENT
  BOTOX
  FILLER
}

model ConsentForm {
  id          String         @id @default(cuid())
  type        ConsentFormType
  signature   String
  signedAt    DateTime       @default(now())
  formData    Json
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  clientId    String
  client      Client         @relation(fields: [clientId], references: [id])

  @@unique([clientId, type])
  @@index([clientId])
}
